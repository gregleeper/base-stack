---
description: The package manager of choice for this project is pnpm
globs: 
alwaysApply: false
---

# Package Manager	

- The package manager for this project is pnpm

# React Router

- We are using react router v7
	- v7 uses the "react-router" package and not "react-router-dom"
- In loaders and actions return naked json objects. Do not use a helper json function as it is deprecated.
- We are able to stream data from loaders. Consider the following:
* Important!: Do not use remix, @remix-run/, remix-run. These have been replaced by react-router!

#### Streaming with Suspense

Streaming with React Suspense allows apps to speed up initial renders by deferring non-critical data and unblocking UI rendering.

React Router supports React Suspense by returning promises from loaders and actions.

1. Return a promise from loader
React Router awaits route loaders before rendering route components. To unblock the loader for non-critical data, return the promise instead of awaiting it in the loader.
```tsx
import type { Route } from "./+types/my-route";

export async function loader({}: Route.LoaderArgs) {
  // note this is NOT awaited
  let nonCriticalData = new Promise((res) =>
    setTimeout(() => res("non-critical"), 5000)
  );

  let criticalData = await new Promise((res) =>
    setTimeout(() => res("critical"), 300)
  );

  return { nonCriticalData, criticalData };
}
```

2. Render the fallback and resolved UI
The promise will be available on loaderData, <Await> will await the promise and trigger <Suspense> to render the fallback UI.
```tsx
import * as React from "react";
import { Await } from "react-router";

// [previous code]

export default function MyComponent({
  loaderData,
}: Route.ComponentProps) {
  let { criticalData, nonCriticalData } = loaderData;

  return (
    <div>
      <h1>Streaming example</h1>
      <h2>Critical data value: {criticalData}</h2>

      <React.Suspense fallback={<div>Loading...</div>}>
        <Await resolve={nonCriticalData}>
          {(value) => <h3>Non critical value: {value}</h3>}
        </Await>
      </React.Suspense>
    </div>
  );
}
```

* With React 19
If you're experimenting with React 19, you can use React.use instead of Await, but you'll need to create a new component and pass the promise down to trigger the suspense fallback.
```tsx
<React.Suspense fallback={<div>Loading...</div>}>
  <NonCriticalUI p={nonCriticalData} />
</React.Suspense>
```

```tsx
function NonCriticalUI({ p }: { p: Promise<string> }) {
  let value = React.use(p);
  return <h3>Non critical value {value}</h3>;
}
```
## Routing

This project uses routing via the [routes.ts](mdc:app/routes.ts) file. Get an overview of Routing via this link: https://reactrouter.com/start/framework/routing#route-modules

## Route type

In React Router v7, types are generated for each route dynamically. You can get the Route type relative to the file:
	- Example: for the [users.tsx](mdc:app/routes/admin/users/users.tsx) file we import its Route type from the files directory ./+types/users
```tsx
// the relative import below does not come from that relative directory; there is a reference in vite that sends it to a hidden 
// directory in the root of the project folder. You do not need to know the contents.
	import type { Route } from "./+types/users"
```
**Important** Never update or create the Route type as it is something generted by React Router. 


## Type Inference

Prefer type inference when possible. Most of React Router gives type inference for free. Use it. Do not define return types for loaders and actions. Those should be infered. 

## Context

We have context available in all routes in this project. In loaders and actions, use context to grab the user. 
Example: 
```tsx 
// [home.tsx](mdc:app/routes/home.tsx)
export const loader = async ({ request, context }: Route.LoaderArgs) => {
	const timezoneDate = convertDateToUserTz(new Date(), request)

	// Get current date for filtering
	const today = new Date()
	today.setHours(0, 0, 0, 0)

	const oneMonthFromNow = new Date()
	oneMonthFromNow.setMonth(oneMonthFromNow.getMonth() + 1)
	oneMonthFromNow.setHours(23, 59, 59, 999)
	const user = context.prismaUser
	if (!user) {
		throw redirect("/login")
	}

	const userGroups = await getUserGroupsForUser(user.id)
	// ...rest of code

}
```

## Loader Data and Action Data

Instead of using the useLoaderData and useActionData hooks, prefer to destructure the default component's props.
Example:
```tsx
export default function GroupDetails({ loaderData }: Route.ComponentProps) {
	const { group, members, currentUser } = loaderData
	
	// ...rest of code
}
```
# Validation

All forms should use the Conform library for validation. This will employ Zod as well.

# Data Model

Before writing forms for CRUD operations, always look at the prisma data model in [schema.prisma](mdc:prisma/schema.prisma) to make sure you include all necessary fields.

